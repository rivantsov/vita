EncryptedDataModule provides a table and supporting code for encrypting/decrypting and storing encrypted data. 

Example: you need to store credit card number in some ICustomer entity; it should be encrypted.  Instead of declaring CcNumber string property, you declare it as a reference: 

[Entity]
public interface ICustomer {
  ...
  IEncryptedData CcNumber {get;set;}
  ...
}

The encrypted cc number will be stored in a separate table. To store the value (for a new credit card), use extension method session.NewOrUpdate:

  cust.CcNumber = session.NewOrUpdate(cust.CcNumber, strCcNumber); //optionally provide channel name

if cust.CcNumber is null, the method will create new instance; if it is existing, it will update the encrypted value. 
To read value back when you need to use it: 
  var strCcNumber = cust.CcNumber.DecryptString();

You need to configure Encryption module for at app startup and create at least one encryption channel. Encryption channel is an named encryptor with a symmetric encryption method and encryption key. You can setup several encryption channels to encrypt different kinds of information (SSN, Cr card number, email) using different cryptoKey or algorithm. 
Configuring encryption channel at application startup:   

   encrService.AddChannel(cryptoKey, algorithm, channelName);

If you use null for channelName, you configure the default channel - the one that is used when channel name is missing in Encrypt/Decrypt calls. Algorithm is one of the algorithms (class derived from SymmetricAlgorithm) in Cryptography namespace. 

You can generate encryptions keys by running TestGenerateCryptoKeys test method in Vita.UnitTests.Extended project - it will produce fresh keys for all encryption algorithms (prints to output, see Output window)

